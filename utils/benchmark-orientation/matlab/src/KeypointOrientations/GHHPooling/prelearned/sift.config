#--------------------------------------------------------------------------------------
# Be careful as we do not use sophisticated parsing
# The parser will read until the semicolon
# 
# types are defined as below
# ss: multiple strings separated with commas
# s: string
# b: boolean
# f: float
# d: int
#--------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------
# Dataset parameters
ss: trainSetList = oxford/bark/,oxford/bikes/,oxford/boat/,oxford/graf/,oxford/leuven/,oxford/trees/,oxford/wall/,oxford/ubc/; # All the first images of oxford dataset is used for training
s: runType = CVPR16;	  # the network type
# b: bNormalizePatch = 0;		  # whether to do patch-wise normalization
# b: bFrontalLearn = 0;		  # frontal learn

#--------------------------------------------------------------------------------------
# Parameters for patch extraction
s: sDataType = Gray;			    # Input image type
f: fRatioScale = 8.0;			    # half_patch_width = fRatioScale/scale/4.0
f: fMinSize = 0.0;    			    # use this size if smaller than this for each kp
b: bPyramidLearn = 0;			    # whether to use pyramid learning

#--------------------------------------------------------------------------------------
# Keypoint extraction parameters
s: sKpType = SIFT;		# the keypoint detector
s: sDescType = SIFT;		# the descriptor type
f: fMinKpSize = 0.0;		# min allowed size of a kp
f: fDupRange = 5.0; 		# Consider keypoints within these pixels as duplicates (training only)
b: bNewCleanMethod = 0;		# cleaning using the new method
d: dMaxKeypointNum = 1000;	# number of maximum keypoints to keep

#--------------------------------------------------------------------------------------
# Model parameters
s: modelType = DropoutCNNGHHH;	# GHH or CNN
d: nPatchSize = 28;		# 64 for CNN
d: num_siamese = 1;		# we have three clones for 
# f: fRatio = 0.0;		# Parameter for WNN pair
s: mapping = Arctan;		# CosSin mapping
b: bNormalizeInput = 1;	    # Normalize input to have zero mean and 1 std
d: nNumHiddenNode = 100;    # Number of Hidden Nodes

# #--------------------------------------------------------------------------------------
# # Optimization parameters
# s: optimizer = Adam;	        # the optimizer type
# d: n_epochs = 100;		# maximum number of epochs
# d: batch_size = 10;		# batch size of SGD
# f: lr = 0.001;			# ADAM
# f: beta1 = 0.9;			# ADAM
# f: beta2 = 0.999;		# ADAM
# f: epsilon = 1e-8;		# ADAM
# f: decay = 0.95;		# ADADELTA param - should be insensitive
# f: epsilon = 1e-8;		# ADADELTA param - should be insensitive
# f: alpha_L2 = 0;		# L2 regularisor weight
# f: lr_half_interval = 10.0;	# Learning rate is decayed to half every this amount of epoch

#--------------------------------------------------------------------------------------
# GHH parameters (will not have effect when using CNN)
d: GHH_numSUM = 4;		# number of sums in GHH
d: GHH_numMAX = 4;		# number of maxes in GHH

# #--------------------------------------------------------------------------------------
# # Testing related parameters
# d: PCAdim = 200;		# dimension of PCA for testing
# f: fOverlapThresh = 40.0;	# overlap threshold for testing pairs

#--------------------------------------------------------------------------------------
